@page "/CarDebts/{CarId:int}";
@inject IRepository<Debt> DebtRepository;
@inject NavigationManager NavigationManager;
<AuthorizeView>
    <Authorized>
        @if (car == null)
        {
            <h3>Car Debts</h3>
        }
        else
        {
            <h3><b>@car.ToString()</b> debts:</h3>
        }

        @if (debts == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (debts.Count == 0)
        {
            <p><em>There are no debts for this car!</em></p>
            <button class="btn-primary" @onclick="BackToCarsClicked">Back to cars</button>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Debt amount</th>
                        <th>Is payed</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var debt in debts)
                    {
                        <tr>
                            <td>@debt.DebtAmount.ToString("0.00")</td>
                            <td>@(debt.IsPayed ? "Yes" : "No")</td>
                        </tr>
                    }
                </tbody>
            </table>
            <h3>Total active debt: <b>@debts.Where(r => !r.IsPayed).Sum(r => r.DebtAmount)</b></h3>
            <button class="btn-primary" @onclick="BackToCarsClicked">Back to cars</button>
        }
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage/>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int CarId { get; set; }

    List<Debt> debts;

    Car car;

    protected override async Task OnInitializedAsync()
    {
        debts = (await DebtRepository.FindAsync(r => r.CarId == CarId)).OrderByDescending(r=>r.Id).ToList();
        car = debts.FirstOrDefault().Car;
    }
    private void BackToCarsClicked()
    {
        NavigationManager.NavigateTo("/cars");
    }
}
