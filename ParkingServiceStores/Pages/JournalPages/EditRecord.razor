@page "/EditRecord/{Id:int}";
@inject NavigationManager NavigationManager;
@inject IRepository<JournalRecord> JournalRepository;
@inject IRepository<Car> CarRepository;
@inject IRepository<Price> PriceRepository;
@inject IRepository<Debt> DebtRepository;
@inject DebtAmountCalculator DebtAmountCalculator;
@inject NavigationManager NavigationManager;
@inject IJSRuntime js;
<AuthorizeView>
    <Authorized Context="Auth">
        <h3>Edit Information About Record</h3>

        @if (cars == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="text-left">
                <EditForm Model="@record" OnValidSubmit="OnFormSubmit">
                    <FluentValidationValidator />
                    <div class="form-group">
                        <label for="inputCar">Select car:</label>
                        <select tabindex="1" id="inputCar" @bind="record.CarId" class="custom-select">
                            @foreach (var car in cars)
                            {
                                <option value="@car.Id">@car.ToString()</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="inputEntryTime">Entry time</label>
                        <SfDateTimePicker class="form-control" TValue="DateTime" @bind-Value="record.EntryTime" Locale="ru"></SfDateTimePicker>
                    </div>
                    <div class="form-group">
                        <label for="inputOwnerPhone">Leaving time</label>
                        <SfDateTimePicker class="form-control" TValue="DateTime?" @bind-Value="record.LeavingTime" Locale="ru"></SfDateTimePicker>
                    </div>
                    <ValidationSummary />
                    <button class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int Id { get; set; }

    IEnumerable<Car> cars;

    JournalRecord record;

    protected override async Task OnInitializedAsync()
    {
        cars = await CarRepository.GetAllAsync();
        record = await JournalRepository.GetByIdAsync(Id);
    }

    private async void OnFormSubmit()
    {
        await JournalRepository.UpdateAsync(record);
        if (record.LeavingTime != null)
        {
            await AddDebt();
        }
        NavigationManager.NavigateTo("/journal");
    }
    private async Task AddDebt()
    {
        Price lastPrice = (await PriceRepository.GetAllAsync()).OrderBy(r => r.Date).LastOrDefault();
        if (lastPrice == null)
        {
            await js.InvokeVoidAsync("alert", "Price list is empty! Add price in Administration menu, before.");
            return;
        }
        Debt debt = new Debt();
        debt.CarId = record.CarId;
        TimeSpan period = record.LeavingTime.Value - record.EntryTime;
        debt.DebtAmount = DebtAmountCalculator.CalculateDebtAmount(period, lastPrice);
        await DebtRepository.AddAsync(debt);
    }
}
